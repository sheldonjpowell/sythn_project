const playKey = (key) => {
    if (!keys[key]) {
      return;
    }
    const ADSR = {
        attack: 2,
        decay: 0,
        sustain: 1,
        release: 0.3
    };

    let attackSlider = document.querySelector('input[className="attackSlider"').value;
    console.log(attackSlider)

    const STAGE_MAX_TIME = 2;

    const osc = audioContext.createOscillator();
    const noteGainNode = audioContext.createGain();
    noteGainNode.connect(audioContext.destination);
    osc.connect(noteGainNode)

    
    const now = audioContext.currentTime;
    const atkDuration = ADSR.attack * STAGE_MAX_TIME;
    const atkEndTime = now + atkDuration;
    const decayDuration = ADSR.decay * STAGE_MAX_TIME;
    // const zeroGain = 0.00001;
    const maxGain = 0.5;
    // const sustainedGain = .001;
  
    // noteGainNode.gain.value = zeroGain;
  
    const setAttack = () =>

        noteGainNode.gain.setValueAtTime(maxGain, 0, audioContext.currentTime)
    
        // noteGainNode.gain.exponentialRampToValueAtTime(
        //     maxGain,
        //     audioContext.currentTime + 0.01
    //   );
    const setDecay = () =>
    noteGainNode.gain.linearRampToValueAtTime(1, atkEndTime)
        // noteGainNode.gain.exponentialRampToValueAtTime(
        //     sustainedGain,
        //     audioContext.currentTime + 1
    //   );
    const setSustain = () =>

    noteGainNode.gain.setTargetAtTime(ADSR.sustain, atkEndTime, decayDuration)
    //     noteGainNode.gain.exponentialRampToValueAtTime(
    //         sustainedGain,
    //         audioContext.currentTime + 0
    //   );
    // const setRelease = () =>
    //     noteGainNode.gain.exponentialRampToValueAtTime(
    //         zeroGain,
    //         audioContext.currentTime + 2
    //   );
  
    setAttack();
    setDecay();
    setSustain();
    // setRelease();